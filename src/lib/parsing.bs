%language "c++"
%require "3.0.4"
%define api.value.type variant
%define parse.trace
%define parse.error verbose

%token COMPONENT
%token DEFAULT
%token EXPORT
%token RETURN

%token <int> INT
%token <float> FLOAT
%token <std::string> IDENTIFIER
%token <std::string> XML_TEXT_FRAGMENT
%token <std::string> STRING

%type <std::vector<minimale::lang::unit_stmt>> statements
%type <minimale::lang::unit_stmt> statement
%type <std::vector<minimale::lang::comp_stmt>> component_statements
%type <minimale::lang::comp_stmt> component_statement
%type <minimale::lang::comp_func> component_function
%type <std::vector<minimale::lang::func_arg>> function_arguments
%type <std::vector<minimale::lang::func_arg>> function_arguments_list
%type <minimale::lang::func_arg> function_argument
%type <minimale::lang::comp_stmt> component_field
%type <minimale::lang::type_annot> type_annotation
%type <std::vector<minimale::lang::obj_type_field>> object_field_annotations
%type <minimale::lang::obj_type_field> object_field_annotation
%type <std::vector<minimale::lang::func_stmt>> function_statements
%type <minimale::lang::func_stmt> function_statement
%type <minimale::lang::expr> expression
%type <minimale::lang::expr> lvalue
%type <minimale::lang::expr> xml_expression
%type <minimale::lang::expr> matched_xml_tag
%type <std::vector<minimale::lang::xml_frag>> xml_fragments
%type <minimale::lang::xml_frag> xml_fragment
%type <minimale::lang::expr> xml_interpolation
%type <std::map<std::string, minimale::lang::expr>> xml_attrs
%type <minimale::lang::expr> xml_attr_value

%param { minimale::lang::unit& unit }
%start unit

%code requires {
  #include "../../../src/lib/lang.h"
  #include <vector>
}

%code {
  #include <cstdio>
  #include <iostream>

  int yylex(yy::parser::semantic_type* yylval, minimale::lang::unit& unit);
  extern bool yyxmltext;
  void yyerror(const char *s);
  using namespace minimale::lang;
}

%%
unit: statements { unit.stmts = std::move($1); };

statements:
    statements statement { ($$ = std::move($1)).push_back($2); }
  | %empty {};

statement:
  EXPORT DEFAULT COMPONENT IDENTIFIER[name] '{'
    component_statements[stmts]
  '}'
  { $$ = comp({ $name, std::move($stmts) }); };

component_statements:
    component_statements component_statement
    { ($$ = std::move($1)).push_back($2); }
  | %empty {};

component_statement:
    component_function { $$ = std::move($1); }
  | component_field { $$ = std::move($1); };

component_function:
  IDENTIFIER[name] '(' function_arguments[args] ')' '{'
    function_statements[sts]
  '}'
  { $$ = comp_func { $name, std::move($args), std::move($sts) }; };

function_arguments:
    function_arguments_list { $$ = std::move($1); }
  | %empty {};

function_arguments_list:
    function_arguments ',' function_argument
    { ($$ = std::move($1)).push_back(std::move($3)); }
  | function_argument
    { $$.push_back(std::move($1)); };

function_argument:
  IDENTIFIER[name] ':' type_annotation[type]
  { $$ = func_arg { $name, std::move($type) }; };

component_field:
  IDENTIFIER[name] ':' type_annotation[type] ';'
  { $$ = comp_field { $name, std::move($type) }; };

type_annotation:
    IDENTIFIER { $$ = ltr_type_annot { $1 }; }
  | '{' object_field_annotations[fields] '}'
    { $$ = obj_type_annot { std::move($fields) }; };

object_field_annotations:
    object_field_annotations object_field_annotation
    { ($$ = std::move($1)).push_back($2); }
  | %empty {};

object_field_annotation:
  IDENTIFIER[name] ':' type_annotation[type] ','
  { $$ = obj_type_field { $name, std::move($type) }; };

function_statements:
    function_statements function_statement
    { ($$ = std::move($1)).push_back($2); }
  | %empty {};

function_statement:
    RETURN expression ';'
    { $$ = return_stmt { std::move($2) }; }
  | lvalue '=' expression ';'
    { $$ = assignment { std::move($1), std::move($3) }; };

expression:
    '(' expression ')' { $$ = std::move($2); }
  | lvalue { $$ = std::move($1); }
  | STRING { $$ = ltr_string { std::move($1) }; }
  | xml_expression { $$ = std::move($1); };

lvalue:
    IDENTIFIER { $$ = ref { $1 }; }
  | expression '.' IDENTIFIER { $$ = member_access { std::move($1), $3 }; };

xml_expression: matched_xml_tag { $$ = std::move($1); };

/**
 * Inside an XML tag, we need to affect how the lexing is done, because
 * identifiers, keywords, operators, etc. should no longer be special, but
 * instead be simple text fragments. To do so we change a global (eww, we could
 * use a driver class instead) to signify to the lexer to return
 * XML_TEXT_FRAGMENT when it matches the tokens instead of what they would be
 * otherwise.
 *
 * See http://www.gnu.org/software/bison/manual/bison.html#Lexical-Tie_002dins
 */
matched_xml_tag:
  '<' IDENTIFIER[tag_name] xml_attrs[attrs] '>' { yyxmltext = true; }
  xml_fragments[frs]
  '<' '/' IDENTIFIER[end_name] '>'
  {
    const auto& tag_name = $tag_name;
    if (tag_name != $end_name) {
      // Should be made to report line/column, etc.
      throw std::runtime_error("mismatched tags");
    }
    $$ = xml_tag { std::move(tag_name), std::move($attrs), std::move($frs) };
  };

xml_fragments:
    xml_fragments xml_fragment { ($$ = std::move($1)).push_back($2); }
  | %empty {};

xml_fragment:
    XML_TEXT_FRAGMENT { $$ = xml_text { std::move($1) }; }
  | xml_interpolation { $$ = xml_interp { std::move($1) }; };
  | '<' IDENTIFIER[tag_name] xml_attrs[attrs] '>' { yyxmltext = true; }
    xml_fragments[frs]
    '<' '/' IDENTIFIER[end_name] '>' {
      yyxmltext = true;
      const auto& tag_name = $tag_name;
      if (tag_name != $end_name) {
        // Should be made to report line/column, etc.
        throw std::runtime_error("mismatched tags");
      }
      $$ = xml_interp {
        xml_tag { tag_name, std::move($attrs), std::move($frs) }
      };
    }
  | '<' IDENTIFIER[tag_name] xml_attrs[attrs] '/' '>' {
      yyxmltext = true;
      const auto& tag_name = $tag_name;
      $$ = xml_interp { xml_tag { tag_name, std::move($attrs), {} } };
    };

xml_interpolation:
  '{' { yyxmltext = false; } expression[exp] '}' { yyxmltext = true; }
  { $$ = std::move($exp); };

xml_attrs:
    xml_attrs IDENTIFIER[name] '=' xml_attr_value[value]
    {
      auto& attrs = ($$ = std::move($1));
      auto& name = $name;
      if (attrs.count(name) > 0) {
        throw std::runtime_error("duplicate attribute: `" + name + "`");
      }
      attrs.emplace(std::move(name), std::move($value));
    }
  | %empty {};

xml_attr_value:
    STRING { $$ = ltr_string { std::move($1) }; }
  | '{' expression '}' { $$ = std::move($2); };

%%

void yy::parser::error(const std::string& m) {
  std::cerr << m << std::endl;
}
