%language "c++"
%require "3.0.4"
%define api.value.type variant
%define parse.trace
%define parse.error verbose

%token COMPONENT
%token DEFAULT
%token EXPORT
%token RETURN

%token <int> INT
%token <float> FLOAT
%token <std::string> IDENTIFIER
%token <std::string> XML_TEXT_FRAGMENT

%type <std::vector<minimale::statement_id>> statements
%type <minimale::statement_id> statement

%param { minimale::store& st }
%start unit

%code requires {
  #include "../../../src/lib/unit.h"
}

%code {
  #include <cstdio>
  #include <iostream>

  int yylex(yy::parser::semantic_type* yylval, minimale::store& st);
  extern bool yyxmltext;
  void yyerror(const char *s);
}

%%
unit: statements { st.unit.statements = std::move($1); };
statements:
    statements statement { $$.push_back($2); }
  | %empty {};
statement:
  EXPORT DEFAULT COMPONENT IDENTIFIER[name] '{'
    component_statements
  '}'
  { $$ = st.create_component($name); };
component_statements:
    component_statements component_statement
  | %empty;
component_statement: component_function | component_field;
component_function:
  IDENTIFIER '(' ')' '{'
    function_statements
  '}';
component_field: IDENTIFIER ':' object_type_annotation ';';
object_type_annotation: '{' object_field_annotations '}';
object_field_annotations:
    object_field_annotations object_field_annotation
  | %empty;
object_field_annotation: IDENTIFIER ':' IDENTIFIER ',';
function_statements:
    function_statements function_statement
  | %empty;
function_statement: RETURN expression ';';
expression:
    '(' expression ')'
  | IDENTIFIER
  | expression '.' IDENTIFIER
  | xml_expression;
xml_expression: matched_xml_tag;
/* use http://www.gnu.org/software/bison/manual/bison.html#Lexical-Tie_002dins */
matched_xml_tag:
  '<' IDENTIFIER '>' { yyxmltext = true; }
  xml_text
  '<' { yyxmltext = false; } '/' IDENTIFIER '>';
xml_text:
    xml_text XML_TEXT_FRAGMENT
  | xml_text xml_interpolation
  | %empty;
xml_interpolation:
  '{' { yyxmltext = false; } expression '}' { yyxmltext = true; }
%%

void yy::parser::error(const std::string& m) {
  std::cerr << m << std::endl;
}
