%{
#include <cstdio>
#include <iostream>
using namespace std;

extern "C" int yylex();
extern "C" int yyparse();
extern bool yyxmltext;
void yyerror(const char *s);
%}

%union {
  int ival;
  float fval;
  char *sval;
}

%token COMPONENT
%token DEFAULT
%token EXPORT
%token RETURN

%token <ival> INT
%token <fval> FLOAT
%token <sval> IDENTIFIER
%token <sval> XML_TEXT_FRAGMENT

%start unit

%%
unit: statements;
statements:
    statements statement
  | ;
statement:
  EXPORT DEFAULT COMPONENT IDENTIFIER '{'
    component_statements
  '}'
  ;
component_statements:
    component_statements component_statement
  | ;
component_statement: component_function | component_field;
component_function:
  IDENTIFIER '(' ')' '{'
    function_statements
  '}';
component_field: IDENTIFIER ':' object_type_annotation ';';
object_type_annotation: '{' object_field_annotations '}';
object_field_annotations:
    object_field_annotations object_field_annotation
  | ;
object_field_annotation: IDENTIFIER ':' IDENTIFIER ',';
function_statements:
    function_statements function_statement
  | ;
function_statement: RETURN expression ';';
expression:
    '(' expression ')'
  | IDENTIFIER
  | expression '.' IDENTIFIER
  | xml_expression;
xml_expression: matched_xml_tag;
matched_xml_tag:
  '<' IDENTIFIER '>' { yyxmltext = true; }
  xml_text
  '<' { yyxmltext = false; } '/' IDENTIFIER '>';
xml_text:
    xml_text XML_TEXT_FRAGMENT
  | xml_text xml_interpolation
  | ;
xml_interpolation:
  '{' { yyxmltext = false; } expression '}' { yyxmltext = true; }
%%
