%language "c++"
%require "3.0.4"
%define api.value.type variant
%define parse.trace
%define parse.error verbose

%token COMPONENT
%token DEFAULT
%token EXPORT
%token RETURN

%token <int> INT
%token <float> FLOAT
%token <std::string> IDENTIFIER
%token <std::string> XML_TEXT_FRAGMENT
%token <std::string> STRING

%type <std::vector<minimale::lang::unit_stmt>> statements
%type <minimale::lang::unit_stmt> statement
%type <std::vector<minimale::lang::comp_stmt>> component_statements
%type <minimale::lang::comp_stmt> component_statement
%type <minimale::lang::comp_func> component_function
%type <std::vector<minimale::function_argument>> function_arguments
%type <std::vector<minimale::function_argument>> function_arguments_list
%type <minimale::function_argument> function_argument
%type <minimale::component_statement_id> component_field
%type <minimale::type_annotation_id> type_annotation
%type <std::vector<minimale::object_type_annotation_field>> object_field_annotations
%type <minimale::object_type_annotation_field> object_field_annotation
%type <std::vector<minimale::function_statement_id>> function_statements
%type <minimale::function_statement_id> function_statement
%type <minimale::expression_id> expression
%type <minimale::expression_id> lvalue
%type <minimale::expression_id> xml_expression
%type <minimale::expression_id> matched_xml_tag
%type <std::vector<minimale::xml_fragment_id>> xml_fragments
%type <minimale::xml_fragment_id> xml_fragment
%type <minimale::expression_id> xml_interpolation

%param { minimale::lang::unit& unit }
%start unit

%code requires {
  #include "../../../src/lib/unit.h"
  #include "lang_variants.json.h"
  #include <vector>
}

%code {
  #include <cstdio>
  #include <iostream>

  int yylex(yy::parser::semantic_type* yylval, minimale::lang::unit& unit);
  extern bool yyxmltext;
  void yyerror(const char *s);
  using namespace minimale::lang;
}

%%
unit: statements { unit.stmts = std::move($1); };

statements:
    statements statement { ($$ = std::move($1)).push_back($2); }
  | %empty {};

statement:
  EXPORT DEFAULT COMPONENT IDENTIFIER[name] '{'
    component_statements[stmts]
  '}'
  { $$ = comp({ $name, std::move($stmts) }); };

component_statements:
    component_statements component_statement
    { ($$ = std::move($1)).push_back($2); }
  | %empty {};

component_statement:
    component_function { $$ = std::move($1); }
  | component_field { $$ = std::move($1); };

component_function:
  IDENTIFIER[name] '(' function_arguments[args] ')' '{'
    function_statements[sts]
  '}'
  { $$ = comp_func({ $name, std::move($args), std::move($sts) }); };

function_arguments:
    function_arguments_list { $$ = std::move($1); }
  | %empty {};

function_arguments_list:
    function_arguments ',' function_argument
    { ($$ = std::move($1)).push_back(std::move($3)); }
  | function_argument
    { $$.push_back(std::move($1)); };

function_argument:
  IDENTIFIER[name] ':' type_annotation[type]
  { $$ = func_arg { $name, $type }; };

component_field:
  IDENTIFIER[name] ':' type_annotation[type] ';'
  { $$ = comp_field { $name, $type }; };

type_annotation:
    IDENTIFIER { $$ = st.create_literal_type_annotation($1); }
  | '{' object_field_annotations[fields] '}'
    { $$ = st.create_object_type_annotation(std::move($fields)); };

object_field_annotations:
    object_field_annotations object_field_annotation
    { ($$ = std::move($1)).push_back($2); }
  | %empty {};

object_field_annotation:
  IDENTIFIER[name] ':' type_annotation[type] ','
  { $$ = minimale::object_type_annotation_field($name, $type); };

function_statements:
    function_statements function_statement
    { ($$ = std::move($1)).push_back($2); }
  | %empty {};

function_statement:
    RETURN expression ';'
    { $$ = st.create_return_statement($2); }
  | lvalue '=' expression ';'
    { $$ = st.create_assignment($1, $3); };

expression:
    '(' expression ')' { $$ = std::move($2); }
  | lvalue { $$ = std::move($1); }
  | STRING { $$ = ltr_string { std::move($1) }; }
  | xml_expression { $$ = std::move($1); };

lvalue:
    IDENTIFIER { $$ = st.create_reference($1); }
  | expression '.' IDENTIFIER { $$ = st.create_member_access($1, $3); };

xml_expression: matched_xml_tag { $$ = std::move($1); };

/**
 * Inside an XML tag, we need to affect how the lexing is done, because
 * identifiers, keywords, operators, etc. should no longer be special, but
 * instead be simple text fragments. To do so we change a global (eww, we could
 * use a driver class instead) to signify to the lexer to return
 * XML_TEXT_FRAGMENT when it matches the tokens instead of what they would be
 * otherwise.
 *
 * See http://www.gnu.org/software/bison/manual/bison.html#Lexical-Tie_002dins
 */
matched_xml_tag:
  '<' IDENTIFIER[tag_name] '>' { yyxmltext = true; }
  xml_fragments[frs]
  '<' '/' IDENTIFIER[end_name] '>'
  {
    const auto& tag_name = $tag_name;
    if (tag_name != $end_name) {
      // Should be made to report line/column, etc.
      throw std::runtime_error("mismatched tags");
    }
    $$ = xml_tag { std::move(tag_name), std::move($frs) };
  };

xml_fragments:
    xml_fragments xml_fragment { ($$ = std::move($1)).push_back($2); }
  | %empty {};

xml_fragment:
    XML_TEXT_FRAGMENT { $$ = xml_text { std::move($1) }; }
  | xml_interpolation { $$ = xml_interp { std::move($1) }; };
  | '<' IDENTIFIER[tag_name] '>' { yyxmltext = true; }
    xml_fragments[frs]
    '<' '/' IDENTIFIER[end_name] '>' {
      yyxmltext = true;
      const auto& tag_name = $tag_name;
      if (tag_name != $end_name) {
        // Should be made to report line/column, etc.
        throw std::runtime_error("mismatched tags");
      }
      $$ = xml_interp { xml_tag { tag_name, std::move($frs) } };
    }
  | '<' IDENTIFIER[tag_name] '/' '>' {
      yyxmltext = true;
      const auto& tag_name = $tag_name;
      $$ = xml_interp { xml_tag { tag_name, {} } };
    };

xml_interpolation:
  '{' { yyxmltext = false; } expression[exp] '}' { yyxmltext = true; }
  { $$ = std::move($exp); };

%%

void yy::parser::error(const std::string& m) {
  std::cerr << m << std::endl;
}
