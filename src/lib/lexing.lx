%option noyywrap nounput batch noinput
%{
#include "parsing.bs.hpp"
#include "../../../src/lib/unit.h"
#include <iostream>
#include <sstream>
using namespace std;
#define YY_DECL int yylex(yy::parser::semantic_type* yylval, minimale::lang::unit& unit)
static int keyword(yy::parser::semantic_type* yylval, int token);
static std::string convert_string(const char* src);
bool yyxmltext = false;
%}
%%

[ \t\n]+        {
  if (yyxmltext) {
    yylval->build<std::string>() = yytext;
    return yy::parser::token::XML_TEXT_FRAGMENT;
  }
};

\/\/.*\n        ;
export          { return keyword(yylval, yy::parser::token::EXPORT); }
default         { return keyword(yylval, yy::parser::token::DEFAULT); }
component       { return keyword(yylval, yy::parser::token::COMPONENT); }
return          { return keyword(yylval, yy::parser::token::RETURN); }

\'([^']|\\.)*\' {
  yylval->build<std::string>() = convert_string(yytext);
  return yy::parser::token::STRING;
}

[0-9]+\.[0-9]+  {
  yylval->build(atof(yytext));
  return yy::parser::token::FLOAT;
}

[0-9]+          {
  yylval->build(atoi(yytext));
  return yy::parser::token::INT;
}

[a-zA-Z][a-zA-Z0-9]*    {
  yylval->build<std::string>() = yytext;
  return yyxmltext
    ? yy::parser::token::XML_TEXT_FRAGMENT
    : yy::parser::token::IDENTIFIER;
}

\{              { return '{'; }
\<              {
  // Left chevron always start a non-text section.
  yyxmltext = false;
  return '<';
}

.               {
  if (yyxmltext) {
    yylval->build<std::string>() = yytext;
    return yy::parser::token::XML_TEXT_FRAGMENT;
  }
  return *(unsigned char*)yytext;
}

%%
static int keyword(yy::parser::semantic_type* yylval, int token) {
  if (!yyxmltext) return token;
  yylval->build<std::string>() = yytext;
  return yy::parser::token::XML_TEXT_FRAGMENT;
}

static std::string convert_string(const char* src) {
  std::ostringstream os;
  ++src;
  while (*src != '\'') {
    if (*src == 0) {
      throw std::runtime_error("nope");
    }
    if (*src == '\\') {
      os << *(++src);
    } else {
      os << *src;
    }
    ++src;
  }
  return os.str();
}
